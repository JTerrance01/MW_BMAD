const puppeteer = require('puppeteer');\n\nasync function testFinalFixes() {\n  console.log('üé® Testing Final Competition Results Page Fixes...\\n');\n  \n  const browser = await puppeteer.launch({ \n    headless: false,\n    defaultViewport: { width: 1200, height: 800 }\n  });\n  \n  try {\n    const page = await browser.newPage();\n    \n    // Navigate to the results page\n    console.log('üìç Navigating to Competition 21 Results page...');\n    await page.goto('http://localhost:3000/competitions/21/results', { \n      waitUntil: 'networkidle0' \n    });\n    \n    // Wait for content to load\n    await page.waitForSelector('.container', { timeout: 10000 });\n    \n    console.log('\\nüéØ Testing Font Color Fixes...');\n    \n    // Check Full Results table font colors\n    const tableDark = await page.$('thead.table-dark');\n    if (tableDark) {\n      console.log('‚úÖ Dark table header found');\n      \n      // Check header text color (should be white #fff)\n      const headerStyles = await page.evaluate(() => {\n        const headerCells = document.querySelectorAll('thead.table-dark th');\n        return Array.from(headerCells).map(cell => {\n          const style = window.getComputedStyle(cell);\n          return {\n            text: cell.textContent.trim(),\n            color: style.color\n          };\n        });\n      });\n      \n      console.log('üìä Header styles:', headerStyles);\n      \n      // Check if headers have proper white color\n      const hasWhiteHeaders = headerStyles.some(header => \n        header.color === 'rgb(255, 255, 255)' || header.color === '#fff'\n      );\n      \n      if (hasWhiteHeaders) {\n        console.log('‚úÖ Headers have proper white text color');\n      } else {\n        console.log('‚ùå Headers may not have proper white text color');\n      }\n    } else {\n      console.log('‚ùå Dark table header not found');\n    }\n    \n    // Check body text colors\n    const bodyTextColors = await page.evaluate(() => {\n      const bodyRows = document.querySelectorAll('tbody tr');\n      return Array.from(bodyRows).slice(0, 3).map((row, index) => {\n        const cells = row.querySelectorAll('td');\n        return {\n          position: index + 1,\n          colors: Array.from(cells).map(cell => {\n            const style = window.getComputedStyle(cell);\n            return {\n              text: cell.textContent.trim().substring(0, 20),\n              color: style.color\n            };\n          })\n        };\n      });\n    });\n    \n    console.log('üìä Body text colors:', JSON.stringify(bodyTextColors, null, 2));\n    \n    console.log('\\nüèÜ Testing Winner Profile Pictures...');\n    \n    // Check winners section\n    const winnersSection = await page.$('[class*=\"Winners\"], .card-header:has-text(\"Winners\"), h3:has-text(\"Winners\")');\n    if (winnersSection) {\n      console.log('‚úÖ Winners section found');\n      \n      // Look for profile pictures in winner cards\n      const profilePictures = await page.$$eval('img[src*=\"profile\"], img[style*=\"border-radius: 50%\"], img[style*=\"60px\"]', imgs => \n        imgs.map(img => ({\n          src: img.src,\n          alt: img.alt,\n          style: img.style.cssText,\n          width: img.width,\n          height: img.height\n        }))\n      );\n      \n      console.log('üì∏ Profile pictures found:', profilePictures.length);\n      if (profilePictures.length > 0) {\n        console.log('‚úÖ Profile pictures detected:', profilePictures);\n      } else {\n        console.log('‚ÑπÔ∏è No profile pictures found - users may not have profile pictures set');\n      }\n      \n      // Check if 1st place has audio player but 2nd/3rd don't\n      const audioPlayers = await page.$$eval('button:has-text(\"Play Track\"), button[class*=\"play\"], audio', buttons => \n        buttons.length\n      );\n      \n      console.log('üéµ Audio players found:', audioPlayers);\n      \n      // Check that only 1st place has play button\n      const firstPlacePlayButton = await page.$('.card:first-child button:has-text(\"Play Track\")');\n      const secondPlacePlayButton = await page.$('.card:nth-child(2) button:has-text(\"Play Track\")');\n      const thirdPlacePlayButton = await page.$('.card:nth-child(3) button:has-text(\"Play Track\")');\n      \n      if (firstPlacePlayButton && !secondPlacePlayButton && !thirdPlacePlayButton) {\n        console.log('‚úÖ Only 1st place has audio player (as expected)');\n      } else {\n        console.log('‚ÑπÔ∏è Audio player distribution:', {\n          first: !!firstPlacePlayButton,\n          second: !!secondPlacePlayButton,\n          third: !!thirdPlacePlayButton\n        });\n      }\n    } else {\n      console.log('‚ùå Winners section not found');\n    }\n    \n    console.log('\\nüì± Testing Overall Layout...');\n    \n    // Check responsive layout\n    const layoutInfo = await page.evaluate(() => {\n      const container = document.querySelector('.container');\n      const winnersCards = document.querySelectorAll('.row .col-lg-4, .row .col-md-6');\n      const table = document.querySelector('table');\n      \n      return {\n        containerWidth: container ? container.offsetWidth : 0,\n        winnerCards: winnersCards.length,\n        hasTable: !!table,\n        tableRows: table ? table.querySelectorAll('tbody tr').length : 0\n      };\n    });\n    \n    console.log('üìê Layout info:', layoutInfo);\n    \n    if (layoutInfo.winnerCards === 3) {\n      console.log('‚úÖ Three winner cards found');\n    }\n    \n    if (layoutInfo.hasTable && layoutInfo.tableRows > 0) {\n      console.log('‚úÖ Full results table with data found');\n    }\n    \n    console.log('\\nüéâ Test completed! Page should now have:');\n    console.log('   ‚Ä¢ Dark table headers with white text');\n    console.log('   ‚Ä¢ Clear, readable body text');\n    console.log('   ‚Ä¢ Profile pictures for winners (if available)');\n    console.log('   ‚Ä¢ Audio player only for 1st place winner');\n    console.log('   ‚Ä¢ No audio players in full results table');\n    \n    // Wait a bit to see the results\n    console.log('\\n‚è≥ Waiting 5 seconds for manual inspection...');\n    await new Promise(resolve => setTimeout(resolve, 5000));\n    \n  } catch (error) {\n    console.error('‚ùå Test failed:', error.message);\n  } finally {\n    await browser.close();\n    console.log('\\n‚úÖ Test completed!');\n  }\n}\n\n// Run the test\ntestFinalFixes().catch(console.error);\n 